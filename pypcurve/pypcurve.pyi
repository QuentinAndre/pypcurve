from typing import Union, Iterable, Dict, List, Any, Set, Tuple, Optional, NoReturn, Pattern, Callable
from matplotlib.pyplot import Axes
from pandas.core.frame import DataFrame
from numpy import array


def adjust_spines(ax: Axes, spines: List[str]) -> None: ...

class PCurve(object):
    __version__: str
    __pcurve_app_version__: str

    _REGEX_STAT_TEST: Pattern
    _POWER_LEVELS: List[float]

    _sig_chi_tests: List[List[float]]
    _sig_f_tests: List[List[float]]
    _df_results: DataFrame
    _n_tests: Dict[str, int]
    _stouffer_p: Dict[str, float]
    _stouffer_z: Dict[str, float]
    _z_at_power: array

    # Static Methods
    @staticmethod
    def _bound_pvals(pvals: array) -> array:
        ...

    @staticmethod
    def _format_pval(p: float) -> Union[str, float]:
        ...

    @staticmethod
    def _compute_prop_lower_33(pcrit: float, family: array, df1: array, df2: array, p: array,
                               ncp33: array) -> array: ...

    @staticmethod
    def _compute_stouffer_z(pp: array) -> float: ...

    @staticmethod
    def _compute_ncp_f(df1: array, df2: array, power: float) -> array: ...

    @staticmethod
    def _compute_ncp_chi(df: array, power: float) -> array: ...

    def _compute_ncp_all(self, power: float) -> array: ...

    def _parse_result(self, test_str: str) -> Tuple[str, str, float, float, float]: ...

    def _compute_pvals(self) -> array: ...

    def _compute_stouffer_z_at_power(self, power: float) -> float: ...

    def _solve_power_for_pct(self, pct) -> float: ...

    def _compute_ppvals_null(self, pcurvetype: str) -> array: ...

    def _compute_ppvals_33(self, pcurvetype: str) -> array: ...

    def _get_33_power_curve(self) -> array: ...

    def _run_binom_test(self, alternative: str) -> float: ...

    def __init__(self, test_arr: Union[array, List[str]]) -> None: ...

    @property
    def has_evidential_value(self) -> bool: ...

    @property
    def has_inadequate_evidence(self) -> bool: ...

    def estimate_power(self) -> Tuple[float, Tuple[float, float]]: ...

    def get_binomial_tests(self) -> Dict[str, float]: ...

    def get_stouffer_tests(self) -> Dict[str, Dict[str, float]]: ...

    def get_results_entered(self) -> DataFrame: ...

    def pcurve_analysis_summary(self) -> DataFrame: ...

    def summary(self) -> None: ...

    def plot_power_estimate(self, dpi: Optional[Union[int, float]]) -> Axes: ...

    def plot_pcurve(self, dpi: Optional[Union[int, float]]) -> Axes: ...
